{
   "$id" : "https://schemablocks.org/schemas/beacon-v2/GenomicVariantFields/2.0.0-draft.3",
   "$schema" : "http://json-schema.org/draft-07/schema#",
   "description" : "All the required fields to query any kind of variant (e.g. SNP, DUP, \netc.).\n",
   "examples" : [],
   "meta" : {
      "contributors" : [
         {
            "id" : "https://beacon-project.io/categories/people.html",
            "label" : "ELIXIR Beacon project team"
         },
         {
            "id" : "github:@jrambla",
            "label" : "Jordi Rambla"
         },
         {
            "id" : "github:@sdelatorrep",
            "label" : "Sabele de la Torre"
         },
         {
            "id" : "github:@mamanambiya",
            "label" : "Mamana Mbiyavanga"
         },
         {
            "id" : "orcid:0000-0002-9903-4248",
            "label" : "Michael Baudis"
         }
      ],
      "provenance" : [
         {
            "id" : "https://github.com/ga4gh-beacon/specification-v2",
            "label" : "Beacon v2"
         }
      ],
      "sb_status" : "community",
      "used_by" : [
         {
            "id" : "https://github.com/progenetix/schemas/",
            "label" : "Progenetix database schema (Beacon+ backend)"
         }
      ]
   },
   "properties" : {
      "alternateBases" : {
         "$ref" : "AlternateBases.yaml#/"
      },
      "assemblyId" : {
         "$ref" : "Assembly.yaml#/"
      },
      "end" : {
         "description" : "Precise or fuzzy end coordinate(s) (0-based, exclusive). See `start`. \n\nFor fuzzy matches, provide 2 values in the array (e.g. [111,222]).\n",
         "items" : {
            "format" : "int64",
            "minimum" : "1",
            "type" : "integer"
         },
         "maxItems" : "2",
         "minItems" : "0",
         "type" : "array"
      },
      "id" : {
         "description" : "Id of the variant to display.\n",
         "type" : "string"
      },
      "mateName" : {
         "$ref" : "Chromosome.yaml#/"
      },
      "referenceBases" : {
         "$ref" : "ReferenceBases.yaml#/"
      },
      "referenceName" : {
         "$ref" : "Chromosome.yaml#/"
      },
      "start" : {
         "description" : "Precise or fuzzy start coordinate position(s), allele locus \n(0-based, inclusive).\n* `start` only:\n  - for single positions, e.g. the start of a specified sequence \n  alteration where the size is given through the specified \n  `alternateBases`\n  - typical use are queries for SNV and small InDels\n  - the use of `start` without an `end` parameter requires the use \n  of `referenceBases`\n* `start` and `end`:\n  - if used with `variantType`, for special use case for exactly \n  determined structural changes\n  - without `variantType`, for searching any variant falling within \n  this range (a.k.a. range query)\n* use 2 values for querying imprecise positions (e.g. identifying \nall structural variants starting anywhere between `start[0]` <-> \n`start[1]`, and ending anywhere between `end[0]` <-> `end[1]`)\n* single or double sided precise matches \ncan be achieved by setting `start[1]=start[0]+1` and `end[1]=end[0]+1`\n",
         "items" : {
            "format" : "int64",
            "minimum" : "0",
            "type" : "integer"
         },
         "maxItems" : "2",
         "minItems" : "1",
         "type" : "array"
      },
      "variantType" : {
         "description" : "The `variantType` is used to denote e.g. structural variants.\nExamples:\n* DUP: duplication of sequence following `start`; not necessarily in\nsitu\n* DEL: deletion of sequence following `start`\n* BND: breakend, i.e. termination of the allele at position\n      `start` or in the `startMin` => `startMax` interval, or fusion\n      of the sequence to distant partner\nOptional: either `alternateBases` or `variantType` is required.\n",
         "type" : "string"
      }
   },
   "title" : "GenomicVariantFields",
   "type" : "object",
   "version" : "2.0.0-draft.3"
}

